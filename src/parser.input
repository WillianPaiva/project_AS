print"/******************************/";
print"/* tests de la syntaxe de base */";
print"/******************************/";
print"";
print"-3+10<=7;";
-3+10 <= 7;
print"";
print"let a = 4;";
let a = 4;
print"a;";
a;
print"";
print"let acc = fun x -> x+1;";
let acc = fun x -> x+1;
print"let square = fun x -> x*x;";
let square = fun x -> x*x;
print"";
print"acc a;";
acc a;
print"";
print"square a;";
square a;
print"";
print"let b = 5;";
let b = 5;
print"";
print"acc a + b * 3;";
acc a + b * 3;
print"";
print"acc a + acc b * 2;";
acc a + acc b * 2;
print"";
print"let sq = fun x y -> square (x+y);";
let sq = fun x y -> square (x+y);
print"sq a b";
sq a b;
print"";
print"if acc b > 2 then square + 2 a else square b - 1;";
if acc b > 2 then square a + 2 else square b - 1;
print"";
print"if if a==1 then 0 else 1 then a else -a;";
if if a==1 then 0 else 1 then a else -a;
print"";
print"(if acc a > 2 then square a + 2 else square a - 1) + 5 * (if acc b > 0 || acc a >0 then -1 else 1);";
(if acc a > 2 then square a + 2 else square a - 1) + 5 * (if acc b > 0 || acc a >0 then -1 else 1);
print"";
print"if acc a > 2 && square b *5 > 200/7 then square a + 2 else square a -1;";
if acc a > 2 && square b *5 > 200/7 then square a + 2 else square a -1;
print"";
print"(fun z -> (if acc a > 2 || if square b > 24 then acc a -1 <0 else square a > acc a ";
       	print"  then fun a b -> a*a + 5*b -z ";
    	print"  else fun a b -> a*b-b +z) 3 4) 7;";
(fun z -> (if acc a > 2 || if square b > 24 then acc a -1 <0 else square a > acc a 
       	  then fun a b -> a*a + 5*b -z
    	  else fun a b -> a*b-b +z) 3 4) 7;
print"";
print"/***  test fonction récursive ***/";
print"let div_rec = fun p n acu -> if p<n then acu else (div_rec (p-n) n (acu+1));";
print"let div = fun p n -> (div_rec p n 0);";
print"(div 12 3);";
let div_rec = fun p n acu -> if p<n then acu else (div_rec (p-n) n (acu+1));
let div = fun p n -> (div_rec p n 0);
(div 12 3);
print"";
print"/*** test factorielle ***/";
print"let fac = fun n -> if n<=0 then 1 else  n * (fac (n-1)) ;";
print"(fac  2);";
let fac = fun n -> if n<=0 then 1 else  n * (fac (n-1)) ;
fac 2;
print"";
print"/*** fonction avec plusieurs arguments ***/";
print"let f = fun x y -> x+y;";
print"f 5 6;";
let f = fun x y -> x+y;
f 5 6;
print"";
print"/****************************/";
print"/* tests sur LET IN et WHERE */";
print"/****************************/";
print"";
print"square x + x where x=3;";
square x + x where x=3;
print"";
print"let x = 5 in x < 10;";
let x = 5 in x < 10;

print"";
print"/************************/";
print"/* tests sur les listes */";
print"/************************/";
print""; 
print"let l = [0,1,2];";
let l = [0,1,2];
print"";
print"hd l;";
hd l;
print"";
print"hd tl l;";
hd tl l;
print"";
print"hd tl tl l;";
hd tl tl l;
print"";

print"";
print"/************************/";
print"/* tests sur les objets */";
print"/************************/";
print"";


print"Création d'un fichier output.html avec 3 figures";
print"Une rotation + translation d'une courbe de bezier";
print"Une rotation + translation d'un cercle";
print"Une rotation + translation d'un chemin représentant un triangle";

print"let ca = {150,150};";
print"let cb = Cercle(ca,60);";
let ca = {150,150};
let cb = Cercle(ca,60);

print"let ac = rotate(translate(cb,{0,20}),ca,-30);";
print"un total de 12 rotations + translations..";
let ac = rotate(translate(cb,{0,20}),ca,-30);
let bc = rotate(translate(ac,{0,20}),ca,-30);
let cc = rotate(translate(bc,{0,20}),ca,-30);
let dc = rotate(translate(cc,{0,20}),ca,-30);
let ec = rotate(translate(dc,{0,20}),ca,-30);
let fc = rotate(translate(ec,{0,20}),ca,-30);
let gc = rotate(translate(fc,{0,20}),ca,-30);
let hc = rotate(translate(gc,{0,20}),ca,-30);
let ic = rotate(translate(hc,{0,20}),ca,-30);
let jc = rotate(translate(ic,{0,20}),ca,-30);
let kc = rotate(translate(jc,{0,20}),ca,-30);
let lc = rotate(translate(kc,{0,20}),ca,-30);
let lcc = [ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,kc,lc];

print"let pa = {700,700};";
print"let pb = {700,900};";
print"let pc = {900,800};";
print"let pd = pa--pb--pc--pa;";

let pa = {700,700};
let pb = {700,900};
let pc = {900,800};
let pd = pa--pb--pc--pa;

print"let ap = rotate(translate(pd,{0,20}),pa,-30);";
print"un total de 12 rotations + translations..";
let ap = rotate(translate(pd,{0,20}),pa,-30);
let bp = rotate(translate(ap,{0,20}),pa,-30);
let cp = rotate(translate(bp,{0,20}),pa,-30);
let dp = rotate(translate(cp,{0,20}),pa,-30);
let ep = rotate(translate(dp,{0,20}),pa,-30);
let fp = rotate(translate(ep,{0,20}),pa,-30);
let gp = rotate(translate(fp,{0,20}),pa,-30);
let hp = rotate(translate(gp,{0,20}),pa,-30);
let ip = rotate(translate(hp,{0,20}),pa,-30);
let jp = rotate(translate(ip,{0,20}),pa,-30);
let kp = rotate(translate(jp,{0,20}),pa,-30);
let lp = rotate(translate(kp,{0,20}),pa,-30);
let lt = [ap,bp,cp,dp,ep,fp,gp,hp,ip,jp,kp,lp];

print"let ba = {400,400};";
print"let bb = {400,500};";
print"let bc = {500,500};";
print"let bd = {500,400};";
print"let bg = Bezier(ba,bb,bc,bd);";

let ba = {400,400};
let bb = {400,500};
let bc = {500,500};
let bd = {500,400};
let bg = Bezier(ba,bb,bc,bd);


print"let ab = rotate(translate(bg,{0,20}),ba,-30);";
print"un total de 12 rotations + translations..";
let ab = rotate(translate(bg,{0,20}),ba,-30);
let bb = rotate(translate(ab,{0,20}),ba,-30);
let cb = rotate(translate(bb,{0,20}),ba,-30);
let db = rotate(translate(cb,{0,20}),ba,-30);
let eb = rotate(translate(db,{0,20}),ba,-30);
let fb = rotate(translate(eb,{0,20}),ba,-30);
let gb = rotate(translate(fb,{0,20}),ba,-30);
let hb = rotate(translate(gb,{0,20}),ba,-30);
let ib = rotate(translate(hb,{0,20}),ba,-30);
let jb = rotate(translate(ib,{0,20}),ba,-30);
let kb = rotate(translate(jb,{0,20}),ba,-30);
let lb = rotate(translate(kb,{0,20}),ba,-30);
let lbb = [ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb];





Draw([lt,lbb,lcc]);







